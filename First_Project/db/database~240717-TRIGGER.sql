CREATE OR REPLACE TRIGGER TRIGGER_TEST1
    BEFORE
    UPDATE ON DEPT 
    FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('변경 전 : ' || :OLD.DNAME);
    DBMS_OUTPUT.PUT_LINE('변경 후 : ' || :NEW.DNAME);
END;
/
-- 1번 옵션
-- BEFORE : 이벤트 발생 전 - IF를 걸어 무결성 체크를 할 때 주로 사용한다.
-- AFTER : 이벤트 발생 후 - 무결성 체크가 필요 없는 경우에 사용한다.
-- 2번 옵션
-- UPDATE OR INSERT OR DELETE
-- 3번 옵션
-- 생략가능하다.
-- FOR EACH ROW 이걸 선언하면 행마다 기록이남고 생략하면 총 한번만남음.
SET SERVEROUTPUT ON;
SELECT * FROM DEPT;
UPDATE DEPT
SET DNAME = 'TEST'
WHERE DEPTNO = 10;

CREATE OR REPLACE TRIGGER TRIGGER_TEST2
    AFTER
    INSERT ON EMP
    --FOR EACH ROW
DECLARE
    AVG_SAL EMP.SAL%TYPE;
BEGIN
    SELECT ROUND(AVG(SAL), 1)
    INTO AVG_SAL
    FROM EMP;
    DBMS_OUTPUT.PUT_LINE('급여 평균은 ' || AVG_SAL || '입니다');
END;
/

INSERT INTO EMP(EMPNO, ENAME, JOB, HIREDATE, SAL)
    VALUES(100, 'TEST', 'SALES', SYSDATE, 1234);
    
SELECT * FROM EMP;

--------------------------------------------------------------------------------------

CREATE TABLE BOOK_LOG(
    BOOKID_L NUMBER,
    OLD_PRICE NUMBER,
    NEW_PRICE NUMBER,
    CDATETIME DATE,
    ID VARCHAR2(40)
);
COMMIT;

CREATE OR REPLACE TRIGGER BOOK_TRIGGER1
    AFTER
    UPDATE ON BOOK
    FOR EACH ROW
BEGIN
    INSERT INTO BOOK_LOG
    VALUES(:NEW.BOOKID, :OLD.PRICE, :NEW.PRICE, SYSDATE, SYS_CONTEXT('USERENV', 'SESSION_USER'));
END;
/
-- SYS_CONTEXT('USERENV', 'SESSION_USER') 오라클 DB의 로그인 계정 정보.

SELECT * FROM BOOK_LOG;
SELECT * FROM BOOK;

UPDATE BOOK
SET PRICE = 8000
WHERE BOOKID = 1;

SELECT * FROM BOOK_LOG;
COMMIT;

--------------------------------------------------------------------------------------

CREATE TABLE STUDENT_LOG(
    L_STUNO VARCHAR2(20),
    L_STUNAME VARCHAR2(20),
    L_STUDEPT VARCHAR2(30),
    L_DATE DATE,
    L_ID VARCHAR2(30)
);
COMMIT;

CREATE OR REPLACE TRIGGER STUDENT_TRIGGER1
    AFTER
    UPDATE OR INSERT OR DELETE ON STUDENT
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO STUDENT_LOG
        VALUES(:NEW.STU_NO, :NEW.STU_NAME, :NEW.STU_DEPT, SYSDATE, SYS_CONTEXT('USERENV', 'SESSION_USER'), 'I');
    ELSIF UPDATING THEN
        INSERT INTO STUDENT_LOG
        VALUES(:NEW.STU_NO, :NEW.STU_NAME, :NEW.STU_DEPT, SYSDATE, SYS_CONTEXT('USERENV', 'SESSION_USER'), 'U');
    ELSIF DELETING THEN
        INSERT INTO STUDENT_LOG
        VALUES(:OLD.STU_NO, :OLD.STU_NAME, :OLD.STU_DEPT, SYSDATE, SYS_CONTEXT('USERENV', 'SESSION_USER'), 'D');
    END IF;    
END;
/

SELECT * FROM STUDENT;
SELECT * FROM STUDENT_LOG;

UPDATE STUDENT
SET STU_HEIGHT = STU_HEIGHT + 1
WHERE STU_NO = 20153075;
INSERT INTO STUDENT
VALUES(12341234, '홍길동', '기계', 1, 'C', 'M', 181, 68);
INSERT INTO STUDENT(STU_NO, STU_NAME)
VALUES(82341491, '홍길동3S');

DELETE FROM STUDENT WHERE STU_NO = 1234141;

-- 테이블 컬럼 추가하기
ALTER TABLE STUDENT
ADD L_ENVET VARCHAR2(10);

--------------------------------------------------------------------------------------

CREATE TABLE EMP_LOG (
    L_EMPNO NUMBER,
    L_MGR NUMBER,
    L_SAL NUMBER,
    L_COMM NUMBER,
    L_ID VARCHAR(20),
    EVENT VARCHAR(2)
);

CREATE OR REPLACE TRIGGER EMP_TRIGGER1
    AFTER
    UPDATE OR INSERT OR DELETE ON EMP
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO EMP_LOG
        VALUES(:NEW.EMPNO, :NEW.MGR, :NEW.SAL, :NEW.COMM, SYS_CONTEXT('USERENV', 'SESSION_USER'), 'I');
    ELSIF UPDATING THEN
        INSERT INTO EMP_LOG
        VALUES(:NEW.EMPNO, :NEW.MGR, :NEW.SAL, :NEW.COMM, SYS_CONTEXT('USERENV', 'SESSION_USER'), 'U');
    ELSIF DELETING THEN
        INSERT INTO EMP_LOG
        VALUES(:OLD.EMPNO, :OLD.MGR, :OLD.SAL, :OLD.COMM, SYS_CONTEXT('USERENV', 'SESSION_USER'), 'D');
    END IF;
END;
/

UPDATE EMP
SET SAL = SAL - 50
WHERE EMPNO = 7369;
INSERT INTO EMP
VALUES(1234, 'HONG', 'SALESMAN', 7902, SYSDATE, 800, NULL, 20);
INSERT INTO EMP
VALUES(1238, 'KIM', 'SALESMAN', 7902, SYSDATE, 800, 200, 20);

INSERT INTO EMP(EMPNO, ENAME, MGR, SAL, COMM)
VALUES(1234, 'KIMS', 7902, 800, 200);
DELETE FROM EMP WHERE EMPNO = 1234;
DELETE FROM EMP WHERE EMPNO = 1238;

SELECT * FROM EMP;
SELECT * FROM EMP_LOG;

--------------------------------------------------------------------------------------

CREATE OR REPLACE TRIGGER EMP_TRIGGER1
    AFTER
    UPDATE OR INSERT OR DELETE ON EMP
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO EMP_LOG
        VALUES(:NEW.EMPNO, :NEW.MGR, :NEW.SAL, :NEW.COMM, SYS_CONTEXT('USERENV', 'SESSION_USER'), 'I');
    ELSIF UPDATING THEN
        INSERT INTO EMP_LOG
        VALUES(:NEW.EMPNO, :NEW.MGR, :NEW.SAL, :NEW.COMM, SYS_CONTEXT('USERENV', 'SESSION_USER'), 'U');
    ELSIF DELETING THEN
        RAISE_APPLICATION_ERROR(-20000, 'EMP 테이블은 삭제 불가');
    END IF;
END;
/
-- -20000 ~ -29999 에러를 만들 수 있다.

CREATE OR REPLACE TRIGGER EMP_TRIGGER2
    AFTER
    DELETE ON EMP
    FOR EACH ROW
BEGIN
    IF TO_CHAR(SYSDATE,'DY') IN ('수', '토', '일') THEN
        RAISE_APPLICATION_ERROR(-20001, '주말에는 테이블 삭제 불가');
    END IF;
END;
/

