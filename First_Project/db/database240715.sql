--1. 아이디가 7글자 이상인 학생들의 목록을 출력하시오.
SELECT *
FROM STU
WHERE LENGTH(ID) >= 7;

--2. 아이디에 a가 들어있는 학생들의 목록을 출력하시오. (like)
SELECT *
FROM STU
WHERE ID LIKE '%a%';

--3. 전공(DEPTNO1)이 컴퓨터공학과인 학생들의 목록을 출력하시오.
SELECT *
FROM STU S
INNER JOIN DEPARTMENT D ON S.DEPTNO1 = D.DEPTNO
WHERE DNAME = '컴퓨터공학과';

--4. 81년도에 입사한 교수들의 목록을 출력하시오.
-- TO_CHAR(HIREDATE, 'YYYY.MM.DD HH24:MI:SS'), 2024.07.15 10:32:30
SELECT *
FROM PROFESSOR
WHERE TO_CHAR(HIREDATE, 'YY') = '81';

SELECT *
FROM PROFESSOR
WHERE SUBSTR(HIREDATE, 1, 2) = '81';

--5. 각 학년별 학생들의 평균 키를 구하시오.
SELECT GRADE, AVG(HEIGHT) AS AVG_HEI
FROM STU
GROUP BY GRADE;

--6. 96학번과 97학번 중 가장 키가 큰 학생의 학번, 이름, 아이디, 키를 출력하시오.
-- (학번 : STUNO 의 첫 두글자)
SELECT STUNO, NAME, ID, HEIGHT
FROM STU S
INNER JOIN (
    SELECT MAX(HEIGHT) AS MAX_HEI, SUBSTR(STUNO, 1, 2) AS STNO
    FROM STU
    WHERE SUBSTR(STUNO, 1, 2) IN (96, 97)
    GROUP BY SUBSTR(STUNO, 1, 2)
) NO ON SUBSTR(STUNO, 1, 2) = NO.STNO AND S.HEIGHT = NO.MAX_HEI;


SELECT *
FROM STU S1
INNER JOIN (
    SELECT MAX(HEIGHT) AS MAX_HEIGHT , SUBSTR(STUNO, 1, 2) AS STUNO
    FROM STU
    WHERE SUBSTR(STUNO, 1, 2) IN (96, 97)
    GROUP BY SUBSTR(STUNO, 1, 2)
) S2 ON SUBSTR(S1.STUNO, 1, 2) = S2.STUNO AND S1.HEIGHT = S2.MAX_HEIGHT;


--7. 교수의 평균임금이 가장 높은 학과의 학과명, 평균 임금을 출력하시오.
SELECT DNAME, MAX(AVG_PAY) AS PAY
FROM (
    SELECT AVG(PAY) AS AVG_PAY, DNAME
    FROM PROFESSOR P
    INNER JOIN DEPARTMENT D ON  P.DEPTNO = D.DEPTNO
    GROUP BY DNAME
) AVG
WHERE AVG_PAY = (SELECT MAX(AVG(PAY)) AS AVG_PAY
                 FROM PROFESSOR P
                 INNER JOIN DEPARTMENT D ON  P.DEPTNO = D.DEPTNO
                 GROUP BY DNAME)
GROUP BY DNAME;

SELECT AVG(PAY) AS PAY, DNAME
FROM PROFESSOR P
INNER JOIN DEPARTMENT D ON P.DEPTNO = D.DEPTNO
GROUP BY DNAME
HAVING MAX(PAY) = (SELECT MAX(AVG(PAY))
FROM PROFESSOR P
INNER JOIN DEPARTMENT D ON P.DEPTNO = D.DEPTNO
GROUP BY P.DEPTNO);



-- 만약, 평균임금이 중복되지 않는다면
SELECT *
FROM (
    SELECT ROUND(AVG(PAY), 1) AS AVG_PAY, DNAME
    FROM PROFESSOR P
    INNER JOIN DEPARTMENT D ON P.DEPTNO = D.DEPTNO
    GROUP BY DNAME
    ORDER BY ROUND(AVG(PAY), 1) DESC
) WHERE ROWNUM = 1;

SELECT *
FROM (
    SELECT *
    FROM STU
    ORDER BY HEIGHT DESC
) WHERE ROWNUM = 1;
-- ROWNUM = 1 첫 번째 컬럼을 가져오는것 ROWNUM < 10 10보다 작은 컬럼을 가져오는것

--8. '인문대학'에 소속된 교수들의 목록을 구하시오.
SELECT *
FROM PROFESSOR P
INNER JOIN DEPARTMENT D1 ON P.DEPTNO = D1.DEPTNO
INNER JOIN DEPARTMENT D2 ON D1.PART = D2.DEPTNO
INNER JOIN DEPARTMENT D3 ON D2.PART = D3.DEPTNO
WHERE D3.DNAME = '인문대학';

--9. 각 학년별 키가 가장 큰 학생의 학번, 이름, 학년, 키를 구하시오.
SELECT *
FROM STU S
INNER JOIN (SELECT MAX(HEIGHT) AS MAX_HEI, GRADE
                FROM STU
                GROUP BY GRADE
) MAX ON S.HEIGHT = MAX.MAX_HEI AND S.GRADE = MAX.GRADE;

SELECT *
FROM STU
WHERE (HEIGHT, GRADE) IN (
    SELECT MAX(HEIGHT) AS MAX_HEIGHT, GRADE
    FROM STU
    GROUP BY GRADE
);

--10. 76년생 학생들의 성별(남,여) 인원수를 구하시오.
SELECT
    COUNT(CASE WHEN SUBSTR(JUMIN, 7, 1) = 1 THEN '남자' END) AS 남자,
    COUNT(CASE WHEN SUBSTR(JUMIN, 7, 1) = 2 THEN '여자' END) AS 여자
FROM STU
WHERE SUBSTR(JUMIN, 1, 2) = '76';

SELECT
    COUNT(CASE WHEN SUBSTR(JUMIN, 7, 1) IN(1,3) THEN '남자' END) AS 남자,
    COUNT(CASE WHEN SUBSTR(JUMIN, 7, 1) IN(2,4) THEN '여자' END) AS 여자
FROM STU
WHERE SUBSTR(JUMIN, 1, 2) = '76';


SELECT COUNT(SUBSTR(JUMIN, 7, 1)) AS COUNT
FROM STU
WHERE SUBSTR(JUMIN, 1, 2) = 76
GROUP BY SUBSTR(JUMIN, 7, 1);

SELECT 
    COUNT(DECODE(SUBSTR(JUMIN, 7, 1), 1, '남자', 3, '남자')) AS 남자, 
    COUNT(DECODE(SUBSTR(JUMIN, 7, 1), 2, '여자', 4, '여자')) AS 여자
FROM STU
WHERE SUBSTR(JUMIN, 1, 2) = 76;

SELECT 
    SUM(COUNT(DECODE(SUBSTR(JUMIN, 7, 1), 1, 1, 3, 1, 0))) AS 남자, 
    SUM(COUNT(DECODE(SUBSTR(JUMIN, 7, 1), 2, 1, 4, 1, 0))) AS 여자
FROM STU
WHERE SUBSTR(JUMIN, 1, 2) = 76;



SELECT * FROM STU;
SELECT * FROM PROFESSOR;
SELECT * FROM DEPARTMENT;



